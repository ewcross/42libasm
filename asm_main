# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    asm_main                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: ecross <marvin@42.fr>                      +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2020/03/27 14:46:35 by ecross            #+#    #+#              #
#    Updated: 2020/03/31 11:14:22 by ecross           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

; to do
; stop using registers for storing things - this may disrupt a called function
; better to just push and pop stored values
; find out problem with malloc

	section	.text
	
	default	rel
	
	global	_main

	extern	_ft_strlen
	extern	_ft_strcpy
	extern	_ft_strcmp
	extern	_ft_write
	extern	_ft_read
	extern	_ft_strdup
	extern	_malloc
	
ft_putchar:
	xor	rax, rax
	mov	[output_buff], rdi
	mov	rax, 0x02000004         ; system call for write
	mov	rsi, output_buff	; move passed variable into rsi
	mov	rdi, 1                  ; file handle 1 is stdout
	mov	rdx, 1                  ; number of bytes
	syscall                         ; invoke operating system to do the write
	ret

ft_putstr:
	xor	rax, rax
	call _ft_strlen
	mov	rsi, rdi
	mov	rdi, 1
	mov	rdx, rax
	call _ft_write
	ret

ft_putnbr:
	xor	rax, rax
	mov	rax, rdi
	mov	r8, 10			; set 10 for divisions
	mov	r9, 0			; initialise counter

	cmp	rax, -17
	jne store
	mov	rdi, 43
	call ft_putchar
	ret

	store:
	push	rax
	inc	r9
	cmp	rax, 9
	jle write
	xor	rdx, rdx
	div	r8
	jmp store

	write:
	pop	rax
	xor	rdx, rdx
	div	r8
	mov	rdi, rdx
	add	rdi, 48
	call ft_putchar
	sub	r9, 1
	cmp	r9, 0
	jg write
	ret

_main:
	; to test _ft_strlen
	;mov	rdi, str
	;call _ft_strlen
	;mov	rdi, rax
	;call ft_putnbr

	; to test ft_strcpy
	;mov	rdi, dst
	;mov	rsi, str
	;call _ft_strcpy
	;mov	rdi, rax
	;mov	r10, rax
	;call _ft_strlen
	;mov	rdi, 1
	;mov	rsi, r10
	;mov	rdx, rax
	;call _ft_write

	; to test ft_strcmp
	;mov	rdi, str
	;mov	rsi, str2
	;call _ft_strcmp
	;mov	rdi, rax
	;call	ft_putnbr

	; to test ft_write
	;mov	rdi, str
	;call _ft_strlen
	;mov	rdx, rax
	;mov	rdi, 1
	;mov	rsi, str
	;call _ft_write

	; to test ft_read
	;mov	rdi, 0
	;mov	rsi, dst
	;mov	rdx, 9
	;call _ft_read
	;mov	rdi, dst
	;call _ft_strlen
	;mov	rdi, 1
	;mov	rsi, dst
	;mov	rdx, rax
	;call _ft_write

	; to test ft_strdup
	mov	rdi, str
	call _ft_strdup
	mov	rdi, rax
	call ft_putstr

	mov	rax, 0x02000001         ; system call for exit
	xor	rdi, rdi                ; exit code 0
	syscall                         ; invoke operating system to exit

	section	.data

str:	db	"goblinsaosihaos", 10, 0
str2:	db	"xob", 0

	section	.bss

output_buff	resb	4
dst		resb	20
